fill = as.factor(item_presentation_condition)
)
) +
geom_histogram(
color = "black",
bins = 16
) +
labs(
x = "Slider response", y = "Fraction of total count"
) +
facet_grid(n_examples ~ item_presentation_condition) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
combined_trials_data %>%
mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
),
trial_num =
factor(trial_num,
levels = c(1, 2, 3),
labels = c("Trial 1", "Trial 2", "Trial 3")
)
) %>% ggplot(., mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(trial_num ~ item_presentation_condition) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
combined_trials_data %>%
mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
),
n_examples =
factor(n_examples,
levels = c(1, 2, 3, 4),
labels = c("1 exemplar", "2 exemplars", "3 exemplars", "4 exemplars")
)
) %>%
ggplot(
.,
mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))
) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(
property + n_examples ~ item_presentation_condition
) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
combined_trials_data %>%
mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
)
) %>% ggplot(., mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(speaker ~ item_presentation_condition) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
filtered_CIs <- CIs %>%
ungroup(var) %>% mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
)
)
ggplot() + geom_linerange(filtered_CIs, mapping = aes(x = item_presentation_condition, ymin = ci_lower, ymax = ci_upper, color = as.factor(item_presentation_condition)), size = 1) +
geom_point(filtered_CIs, mapping = aes(x = item_presentation_condition, y = mean), alpha = 0.5, size = 2) +
scale_color_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
labs(y = "Slider response", x = "Item presentation condition") +
theme(legend.position = "none")
ggplot() +
geom_linerange(filtered_CIs, mapping = aes(x = n_examples, ymin = ci_lower, ymax = ci_upper, color = as.factor(item_presentation_condition)), size = 1) +
geom_point(filtered_CIs, mapping = aes(x = n_examples, y = mean), alpha = 0.5, size = 2) +
labs(y = "Slider response", x = "Number of examples", color = "Item presentation condition") +
scale_color_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "bottom")
ggplot(
combined_trials_data,
mapping = aes(
x = slider_response,
y = item_presentation_condition, fill = ..x..
)
) +
ggridges::geom_density_ridges_gradient(
jittered_points = T, alpha = 0.8, scale = 0.95,
position = ggridges::position_points_jitter(width = 0.01, height = 0),
point_shape = "|", point_size = 2.5, point_alpha = 0.3,
rel_min_height = 0.01, gradient_lwd = 1,
stat = "binline", bins = 25, draw_baseline = F
) +
ggstance::geom_linerangeh(
CIs,
inherit.aes = F,
mapping = aes(
xmin = ci_lower, xmax = ci_upper,
y = as.numeric(item_presentation_condition) + 0.8
),
size = 1.25, color = "black"
) + geom_point(
CIs,
inherit.aes = F,
mapping = aes(
x = mean,
y = as.numeric(item_presentation_condition) + 0.8
),
size = 3, color = "black", shape = 3
) +
scale_x_continuous(
expand = c(0.01, 0),
limits = c(0, 1.02),
breaks = c(0, 0.25, 0.5, 0.75, 1)
) +
scale_y_discrete(expand = c(0.01, 0)) +
viridis::scale_fill_viridis(
name = "Implied Prevalence", option = "D",
breaks = c(0, 1)
) +
guides(fill = F) +
theme(
axis.title.y = element_blank(),
axis.title.x = element_text(hjust = 0.5, vjust = 0)
) +
labs(x = "Probability of Future Instance having Property")
ggplot(combined_trials_data, mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(trial_num ~ item_presentation_condition) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
ggplot(
combined_trials_data,
mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))
) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(
property + n_examples ~ item_presentation_condition
) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
ggplot(combined_trials_data, mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(speaker ~ item_presentation_condition) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("gridExtra")
library("tidyboot")
# Import data
catch_trials_data <- read.csv("catch_trials_data.csv")
combined_trials_data <- read.csv("combined_trials_data.csv")
subject_info_data <- read.csv("subject_info_data.csv")
# Filter labels (esp. for facet grid graphs)
combined_trials_data <- combined_trials_data %>%
mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
),
trial_num =
factor(trial_num,
levels = c(1, 2, 3),
labels = c("Trial 1", "Trial 2", "Trial 3")
),
n_examples =
factor(n_examples,
levels = c(1, 2, 3, 4),
labels = c("1 example", "2 examples", "3 examples", "4 examples")
),
speaker =
factor(speaker,
levels = c("mh", "tg", "sb"),
labels = c("Speaker: mh", "Speaker: tg", "Speaker: sb")
)
)
CIs <- combined_trials_data %>%
group_by(item_presentation_condition, n_examples) %>%
tidyboot_mean(column = slider_response)
ggplot(
combined_trials_data,
mapping = aes(
x = slider_response, y = n_examples,
group = n_examples, fill = as.factor(n_examples)
)
) +
geom_boxplot() +
labs(
title = "Slider response vs. number of examples",
x = "Slider response",
y = "Number of examples"
) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
# Filter data to compute average time per slider response for each worker
subject_average_time <- combined_trials_data %>%
group_by(worker_id, n_examples) %>%
summarize(ave_time_slider_response = mean(slider_time_in_seconds))
# Create histogram
histogram <- ggplot(subject_average_time, mapping = aes(x = ave_time_slider_response)) +
geom_histogram(fill = "cornflowerblue", color = "black", bins = 24) +
labs(title = "Average time per slider response", x = "Average time (sec)", y = "Count")
# Create box plot
box_plot <- ggplot(subject_average_time, mapping = aes(x = ave_time_slider_response, group = n_examples, fill = as.factor(n_examples))) +
geom_boxplot() +
labs(title = "Average time per slider response", x = "Average time (sec)", y = "Number of examples") +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
# Graph both
grid.arrange(histogram, box_plot, ncol = 2)
ggplot(combined_trials_data, mapping = aes(x = trial_time_in_seconds, y = n_examples, group = n_examples, fill = as.factor(n_examples))) +
geom_boxplot() +
labs(title = "Total trial time vs. number of examples", x = "Total trial time (sec)", y = "Number of examples") +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
ggplot(
combined_trials_data,
mapping = aes(
x = slider_response,
y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..],
fill = as.factor(item_presentation_condition)
)
) +
geom_histogram(
color = "black",
bins = 16
) +
labs(
x = "Slider response", y = "Fraction of total count"
) +
facet_grid(n_examples ~ item_presentation_condition) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
ggplot(combined_trials_data, mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(trial_num ~ item_presentation_condition) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
ggplot(
combined_trials_data,
mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))
) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(
property + n_examples ~ item_presentation_condition
) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
ggplot(combined_trials_data, mapping = aes(x = slider_response, y = (..count..) / tapply(..count.., ..PANEL.., sum)[..PANEL..], fill = as.factor(item_presentation_condition))) +
geom_histogram(color = "black", bins = 16) +
labs(x = "Slider response", y = "Fraction of total count") +
facet_grid(speaker ~ item_presentation_condition) +
scale_fill_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "none")
filtered_CIs <- CIs %>%
ungroup(var) %>% mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
)
)
ggplot() + geom_linerange(filtered_CIs, mapping = aes(x = item_presentation_condition, ymin = ci_lower, ymax = ci_upper, color = as.factor(item_presentation_condition)), size = 1) +
geom_point(filtered_CIs, mapping = aes(x = item_presentation_condition, y = mean), alpha = 0.5, size = 2) +
scale_color_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
labs(y = "Slider response", x = "Item presentation condition") +
theme(legend.position = "none")
ggplot() +
geom_linerange(filtered_CIs, mapping = aes(x = n_examples, ymin = ci_lower, ymax = ci_upper, color = as.factor(item_presentation_condition)), size = 1) +
geom_point(filtered_CIs, mapping = aes(x = n_examples, y = mean), alpha = 0.5, size = 2) +
labs(y = "Slider response", x = "Number of examples", color = "Item presentation condition") +
scale_color_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
theme(legend.position = "bottom")
ggplot(
combined_trials_data,
mapping = aes(
x = slider_response,
y = item_presentation_condition, fill = ..x..
)
) +
ggridges::geom_density_ridges_gradient(
jittered_points = T, alpha = 0.8, scale = 0.95,
position = ggridges::position_points_jitter(width = 0.01, height = 0),
point_shape = "|", point_size = 2.5, point_alpha = 0.3,
rel_min_height = 0.01, gradient_lwd = 1,
stat = "binline", bins = 25, draw_baseline = F
) +
ggstance::geom_linerangeh(
CIs,
inherit.aes = F,
mapping = aes(
xmin = ci_lower, xmax = ci_upper,
y = as.numeric(item_presentation_condition) + 0.8
),
size = 1.25, color = "black"
) + geom_point(
CIs,
inherit.aes = F,
mapping = aes(
x = mean,
y = as.numeric(item_presentation_condition) + 0.8
),
size = 3, color = "black", shape = 3
) +
scale_x_continuous(
expand = c(0.01, 0),
limits = c(0, 1.02),
breaks = c(0, 0.25, 0.5, 0.75, 1)
) +
scale_y_discrete(expand = c(0.01, 0)) +
viridis::scale_fill_viridis(
name = "Implied Prevalence", option = "D",
breaks = c(0, 1)
) +
guides(fill = F) +
theme(
axis.title.y = element_blank(),
axis.title.x = element_text(hjust = 0.5, vjust = 0)
) +
labs(x = "Probability of Future Instance having Property")
filtered_CIs <- CIs %>%
ungroup(var) %>% mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
)
)
ggplot() + geom_linerange(filtered_CIs, mapping = aes(x = item_presentation_condition, ymin = ci_lower, ymax = ci_upper, color = as.factor(item_presentation_condition)), size = 1) +
geom_point(filtered_CIs, mapping = aes(x = item_presentation_condition, y = mean), alpha = 0.5, size = 2) +
scale_color_manual(values = c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) +
labs(y = "Slider response", x = "Item presentation condition") +
theme(legend.position = "none")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("gridExtra")
library("tidyboot")
# Import data
catch_trials_data <- read.csv("catch_trials_data.csv")
combined_trials_data <- read.csv("combined_trials_data.csv")
subject_info_data <- read.csv("subject_info_data.csv")
CIs <- combined_trials_data %>%
group_by(item_presentation_condition, n_examples) %>%
tidyboot_mean(column = slider_response)
# Filter/relabel combined_trials_data labels (esp. for facet grid graphs)
combined_trials_data <- combined_trials_data %>%
mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
),
trial_num =
factor(trial_num,
levels = c(1, 2, 3),
labels = c("Trial 1", "Trial 2", "Trial 3")
),
n_examples =
factor(n_examples,
levels = c(1, 2, 3, 4),
labels = c("1 example", "2 examples", "3 examples", "4 examples")
),
speaker =
factor(speaker,
levels = c("mh", "tg", "sb"),
labels = c("Speaker: mh", "Speaker: tg", "Speaker: sb")
)
)
# Filter/relabel CIs data
CIs <- CIs %>%
ungroup(var) %>% mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
)
)
library("dplyr")
library("tidyverse")
library("ggplot2")
library("gridExtra")
library("tidyboot")
catch_trials_data <- read.csv("catch_trials_data.csv")
combined_trials_data <- read.csv("combined_trials_data.csv")
subject_info_data <- read.csv("subject_info_data.csv")
CIs <- combined_trials_data %>%
group_by(item_presentation_condition, n_examples) %>%
tidyboot_mean(column = slider_response)
# Filter/relabel combined_trials_data labels (esp. for facet grid graphs)
combined_trials_data <- combined_trials_data %>%
mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
),
trial_num =
factor(trial_num,
levels = c(1, 2, 3),
labels = c("Trial 1", "Trial 2", "Trial 3")
),
n_examples =
factor(n_examples,
levels = c(1, 2, 3, 4),
labels = c("1 example", "2 examples", "3 examples", "4 examples")
),
speaker =
factor(speaker,
levels = c("mh", "tg", "sb"),
labels = c("Speaker: mh", "Speaker: tg", "Speaker: sb")
)
)
# Filter/relabel CIs data
CIs <- CIs %>%
ungroup(var) %>% mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
)
)
library("dplyr")
library("tidyverse")
library("ggplot2")
library("gridExtra")
library("tidyboot")
catch_trials_data <- read.csv("catch_trials_data.csv")
combined_trials_data <- read.csv("combined_trials_data.csv")
subject_info_data <- read.csv("subject_info_data.csv")
# Filter/relabel combined_trials_data labels (esp. for facet grid graphs)
combined_trials_data <- combined_trials_data %>%
mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
),
trial_num =
factor(trial_num,
levels = c(1, 2, 3),
labels = c("Trial 1", "Trial 2", "Trial 3")
),
n_examples =
factor(n_examples,
levels = c(1, 2, 3, 4),
labels = c("1 example", "2 examples", "3 examples", "4 examples")
),
speaker =
factor(speaker,
levels = c("mh", "tg", "sb"),
labels = c("Speaker: mh", "Speaker: tg", "Speaker: sb")
)
)
# Filter/relabel CIs data
CIs <- CIs %>%
ungroup(var) %>% mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
)
)
# Filter/relabel combined_trials_data labels (esp. for facet grid graphs)
combined_trials_data <- combined_trials_data %>%
mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
),
trial_num =
factor(trial_num,
levels = c(1, 2, 3),
labels = c("Trial 1", "Trial 2", "Trial 3")
),
n_examples =
factor(n_examples,
levels = c(1, 2, 3, 4),
labels = c("1 example", "2 examples", "3 examples", "4 examples")
),
speaker =
factor(speaker,
levels = c("mh", "tg", "sb"),
labels = c("Speaker: mh", "Speaker: tg", "Speaker: sb")
)
)
# Filter/relabel CIs data
CIs <- CIs %>%
ungroup(var) %>% mutate(
item_presentation_condition =
factor(item_presentation_condition,
levels = c("pedagogical", "accidental"),
labels = c("Pedagogical", "Accidental")
)
)
