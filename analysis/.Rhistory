setwd("~/Desktop/urop-tessler-tenenbaum/analysis")
# SETUP: Go to Session > Set Working Directory > To Source File Location
library("RJSONIO")
library("jsonlite")
library("tidyverse")
library("plyr")
# Extract all file names in the MTurk production-results directory
folder_path = "../mturk/production-results/"
files <- dir(folder_path)
# Extract trials_data from each of the MTurk files
catch_df <- data.frame()
combined_df <- data.frame()
subject_df <- data.frame()
for(file_name in files) {
full_file_name <- paste(folder_path, file_name, sep="/")
test_file <- fromJSON(full_file_name)
# WorkerID (pre-hashed by nosub)
worker_id <- test_file$WorkerId
# For catch_trials
file_catch_data <- test_file$answers$catch_trials
file_catch_data$responses <- vapply(file_catch_data$responses, paste, collapse=", ", character(1L)) # flatten subject data
catch_df <- rbind(catch_df, file_catch_data %>% mutate(worker_id = worker_id))
# For trials_data
file_trials_data <- test_file$answers$trials_stimuli_streamlined
combined_df <- rbind(combined_df, file_trials_data %>% mutate(worker_id = worker_id))
# For subject information
file_subject_data <- test_file$answers$subject_information
subject_df <- rbind.fill(subject_df, as.data.frame(file_subject_data) %>% mutate(worker_id = worker_id))
}
# Exclude the intro "trial"
combined_df = combined_df %>% filter(trial_num != 0)
# Write data to CSV file, for use in data_analysis.Rmd
write.csv(catch_df, "catch_trials_data.csv")
write.csv(combined_df, "combined_trials_data.csv")
write.csv(subject_df, "subject_info_data.csv")
library("ggplot2")
library("gridExtra")
catch_trials_dada <- read.csv("catch_trials_data.csv")
combined_trials_data <- read.csv("combined_trials_data.csv")
subject_info_data <- read.csv("subject_info_data.csv")
n_examples_labels <- c("n_examples: 1", "n_examples: 2", "n_examples:3")
names(n_examples_labels) <- c("1", "2", "3")
trial_num_labels <- c("trial_num: 1", "trial_num: 2", "trial_num: 3")
names(trial_num_labels) <- c("1", "2", "3")
ggplot(data=combined_trials_data, aes(x=slider_response, y=n_examples, group=n_examples, fill=as.factor(n_examples))) + geom_boxplot() + labs(title="Slider response vs. number of examples", x="Slider response", y="Number of examples") + scale_fill_manual(values=c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) + theme(legend.position="none")
# Initialize empty data frame for subject average time per trial
subject_average_time <- data.frame()
# Combine every three rows of trials_data, as there are three trials per participant
for(i in 1:nrow(combined_trials_data)) {
three_row_sum <- 0
# Add next term to sum of three rows
three_row_sum <- three_row_sum + combined_trials_data[i, "slider_time_in_seconds"]
three_row_average <- three_row_sum / 3
# If this is the last of the grouping of three rows, add to subject_average_time data frame
if((i %% 3) == 0) {
subject_average_time <- rbind(subject_average_time, data.frame(three_row_average, combined_trials_data[i, "n_examples"]))
three_row_sum <- 0
}
}
# Rename columns (to make a human-readable histogram)
names(subject_average_time)[1] <- "time_in_seconds"
names(subject_average_time)[2] <- "n_examples"
# Create histogram
histogram <- ggplot(subject_average_time, aes(x=time_in_seconds)) + geom_histogram(fill="cornflowerblue", color="black", bins=24) + labs(title="Average time per slider response", x="Average time (sec)", y="Count")
box_plot <- ggplot(data=subject_average_time, aes(x=time_in_seconds, group=n_examples, fill=as.factor(n_examples))) + geom_boxplot() + labs(title="Average time per slider response", x="Average time (sec)", y="Number of examples") + scale_fill_manual(values=c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) + theme(legend.position="none")
grid.arrange(histogram, box_plot, ncol=2)
ggplot(data=combined_trials_data, aes(x=trial_time_in_seconds, y=n_examples, group=n_examples, fill=as.factor(n_examples))) + geom_boxplot() + labs(title="Total trial time vs. number of examples", x="Total trial time (sec)", y="Number of examples") + scale_fill_manual(values=c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) + theme(legend.position="none")
ggplot(combined_trials_data, aes(x=slider_response, fill=as.factor(item_presentation_condition))) + geom_histogram(color="black", bins=16) + labs(x="Slider Response", y="Count") + facet_grid(n_examples ~ item_presentation_condition, labeller=label_both) + scale_fill_manual(values=c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) + theme(legend.position="none")
ggplot(combined_trials_data, aes(x=slider_response, fill=as.factor(item_presentation_condition))) + geom_histogram(color="black", bins=16) + labs(x="Slider Response", y="Count") + facet_grid(trial_num ~ item_presentation_condition, labeller=label_both) + scale_fill_manual(values=c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) + theme(legend.position="none")
ggplot(combined_trials_data, aes(x=slider_response, fill=as.factor(item_presentation_condition))) + geom_histogram(color="black", bins=6) + labs(x="Slider Response", y="Count") + facet_grid(n_examples ~ item_presentation_condition+property, labeller=labeller(n_examples=n_examples_labels)) + scale_fill_manual(values=c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) + theme(legend.position="none")
ggplot(combined_trials_data, aes(x=slider_response, fill=as.factor(item_presentation_condition))) + geom_histogram(color="black", bins=16) + labs(x="Slider Response", y="Count") + facet_grid(speaker ~ item_presentation_condition, labeller=label_both) + scale_fill_manual(values=c("indianred1", "lightgoldenrod1", "darkolivegreen2", "cornflowerblue")) + theme(legend.position="none")
